const jour = require('./jour')


test('Update a chapters text', async() => {
    jour.updateText({chapt_id:19, text: "Rethoric is a usefull skill"})
    expect(1).toBe(1)
})

test('Get a chapters text', async() => {
    const text = await jour.selectText({chapt_id: 19})
    console.log(text)
    expect(1).toBe(1)
})

test('Move a chapters', async() => {

    let chapters = await jour.selectChapters({note_id: 2})
    const currLength = chapters.length

    jour.moveChapter({chapt_id: 3, destination: 2})
    chapters = await jour.selectChapters({note_id: 2})
    
    const result = chapters.length>currLength?1:0
    expect(result).toBe(0)

    expect(1).toBe(1)
})

test('Delete a new chapters', async() => {
    let chapters = await jour.selectChapters({note_id: 1})
    const currLength = chapters.length

    jour.deleteChapter({chapt_id: 18})
    chapters = await jour.selectChapters({note_id: 1})
    
    const result = chapters.length>currLength?1:0
    expect(0).toBe(0)
})

test('Create a new chapter for a notebook', async() => {

    let chapters = await jour.selectChapters({note_id: 1})
    const currLength = chapters.length

    await jour.newChapter({note_id:1, title: "How to use this notebook", description: "This is an intro on how to go about this notebook"})
    chapters = await jour.selectChapters({note_id: 1})
    
    const result = chapters.length>currLength?1:0
    expect(result).toBe(1)
})

test('Select chapters from a notebook', async() => {
    const chapters = await jour.selectChapters({note_id: 1})
    const length = chapters.length>0?1:0
    expect(length).toBe(1)
})

// test('Rename notebook', async() => {
//         const test = async ()=>{   

//           await jour.renameNotebook({name: "Geometry", id: 5})
//           const num = (await jour.getNotebooks()).length
//           return num
//     }

//     expect(await test()).toBe(4);
// });


test('Delete notebook', async() => {

          body = {name: "Logic"}
          const id = await jour.insertNotebook(body) 
          await jour.deleteNotebook({note_id: 4})
          const num = (await jour.getNotebooks()).length

    expect(await test()).toBe(3);
});

test('Insert notebook', async() => {

    body = {name: "Arithmetic"}
    const id = await jour.insertNotebook(body)

    const inserted = await jour.getNotebookById({note_id: id})

    const result = inserted.name == body.name?1:0
    expect(result).toBe(1);
});



